
--- USERS ---
-- MV --
create table if not exists public.users  (
  id text primary key,
  external_id text,
  username text,
  first_name text,
  last_name text,
  attrs JSONB
);

insert into public.users (id,external_id,username,first_name,last_name,attrs) select id,external_id,username,first_name,last_name,attrs from integrations.clerk_wrapper_user;

--- RBAC ---
-- ACTIONS

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'resource_actions_enum') THEN
    CREATE TYPE public.resource_actions_enum AS ENUM ('select', 'insert', 'update', 'delete');
  END IF;
END$$;


--- RESOURCES
create table if not exists
  public.resources (
    id bigint generated by default as identity primary key,
    resource_name text not null unique,
    parent_id bigint references public.resources (id) on delete cascade
  );

-- ROLES
create table if not exists
  public.roles (
    id uuid primary key default gen_random_uuid (),
    role_name text not null unique
  );

--PERMISSIONS
create table if not exists
  public.permissions (
    id bigint generated by default as identity primary key,
    resource_id bigint not null references public.resources (id) on delete cascade,
    resource_action resource_actions_enum not null,
    permissions_description text,
    allow_cascade boolean default false,
    unique (resource_id, resource_action)
  );

--- ROLE_PERMISSIONS
create table if not exists
  public.role_permissions (
    id bigint generated by default as identity primary key,
    role_id uuid not null references public.roles (id) on delete cascade,
    permission_id bigint not null references public.permissions (id) on delete cascade,
    allow_wildcard boolean default false,
    unique (role_id, permission_id)
  );

-- USER ROLES
create table if not exists
  public.user_roles (
    id bigint generated by default as identity primary key,
    user_id text references public.users on delete cascade not null,
    role_id uuid not null references public.roles (id) on delete cascade,
    unique (user_id, role_id)
  );